#!/usr/bin/env bash

framework_location="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

usage="
-l library-name (optional)
  The name of the library for which the information shall be printed. Options: jax, pytorch, tensorflow, all. Default: all.
-p print-format (optional)
  Format in which the stats about buggy files shall be printed. Options: trie, rows, both, none. Default: trie.
"

function usage {
cat <<-____HALP
Usage: ${0##*/} [ --help ]
$usage
____HALP
}

## show options if user selected -h
case $1 in
 -[h?] | --help)
     usage
     exit 0;;
esac


# before running through `getopts`, translate out convenient long-versions
for opt in "$@"; do
    shift
    case "${opt}" in
      '--library-name')    set -- "$@" '-l' ;;
      '--print-format')    set -- "$@" '-p' ;;
      *)                   set -- "$@" "${opt}" ;;
    esac
done

### read the flag and assign values to corresponding variables
while getopts :l:p: flag
do
    case "${flag}" in
        l) library_name=${OPTARG};;
        p) print_format=${OPTARG};;        
        \?) echo "invalid option: -$OPTARG."
            usage
            exit 1
            ;;
        :)  echo "option -$OPTARG requires an argument."
            usage
            exit 1
            ;;            
    esac
done

# print_format trie by default
if [ "$print_format" == "" ]; then 
    echo "defaulting print format to trie"
    print_format='trie'
fi

if ! [[ "$print_format" =~ ^(trie|rows|both|none)$ ]]; then
    echo "option $print_format is not in the list, defaulting to trie"
    print_format='trie'
fi

# library_name all by default
if [ "$library_name" == "" ]; then 
    echo "defaulting library name to all"
    library_name='all'
fi

if ! [[ "$library_name" =~ ^(jax|pytorch|tensorflow|all)$ ]]; then
    echo "option $library_name is not in the list, defaulting to all"
    library_name='all'
fi

(cd $framework_location;

 python stats.py $library_name $print_format

)
