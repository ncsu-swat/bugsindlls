#!/usr/bin/env bash

framework_location="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
home_location=${framework_location}/..

hash conda 2>/dev/null || { echo >&2 "I require conda but it's not installed.  Aborting."; exit 1; }

usage="
-l library-name (mandatory)
  The id of the library for which the information shall be printed. Options: jax, pytorch, tensorflow
-i bug-id (optional if -u is provided)
  The bug number of the library-name for which the information shall be printed.
-c container (mandatory)
  The docker container that contains the testing tool.
-r run-script (mandatory)
  The path to the script relative to the root directory of the repository (or absolute path) that can execute the testing tool.
-v use-library-version (optional)
  The version of the library for which the first bug-id will be retrieved automatically.
"

function usage {
cat <<-____HALP
Usage: ${0##*/} [ --help ]
$usage
____HALP
}

## show options if user selected -h
case $1 in
 -[h?] | --help)
     usage
     exit 0;;
esac

# before running through `getopts`, translate out convenient long-versions
for opt in "$@"; do
    shift
    case "${opt}" in
      '--library-name')    set -- "$@" '-l' ;;
      '--bug-id')          set -- "$@" '-i' ;;
      '--container')       set -- "$@" '-c' ;;
      '--run-script')      set -- "$@" '-r' ;;
      '--use-library-version') set -- "$@" '-v' ;;
      *)                   set -- "$@" "${opt}" ;;
    esac
done

### read the flag and assign values to corresponding variables
while getopts :l:i:c:r:v: flag
do
    case "${flag}" in
        l) library_name=${OPTARG};;
        i) bug_id=${OPTARG};;
        c) container=${OPTARG};;
        r) run_script=${OPTARG};;
        v) library_version=${OPTARG};;
        \?) echo "invalid option: -$OPTARG."
            usage
            exit 1
            ;;
        :)  echo "option -$OPTARG requires an argument."
            usage
            exit 1
            ;;            
    esac
done

### library_name is mandatory
if [ "$library_name" == "" ]; then 
    echo "Please provide library name (-l)"
    usage    
    exit
fi

# library_name must be one of ours
if ! [[ "$library_name" =~ ^(jax|pytorch|tensorflow)$ ]]; then
    echo "library $library_name is not in the list"
    usage    
    exit    
fi

### If -u is provided, fetch bug_id from stats output
if [ -n "$library_version" ]; then
    bug_id=$(stats -l "$library_name" -p none | awk -v version="$library_version" '
        BEGIN { found = 0 }
        /# Bug library version breakdown:/ { found = 1; next }
        found && match($0, /^[[:space:]]*([^:]+):[[:space:]]*([0-9, ]+)/, arr) {
            if (arr[1] == version) {
                split(arr[2], bug_ids, ",");
                gsub(/[[:space:],]/, "", bug_ids[1]);
                print bug_ids[1];
                exit;
            }
        }')
    if [ -z "$bug_id" ]; then
        echo "Could not find an issue number for version $library_version"
        exit 1
    fi
    echo "Using bug-id $bug_id for library $library_name version $library_version"
    cd ${framework_location}

    python retrieve.py "Type" $library_name $library_version > error_list.txt
    docker cp error_list.txt ${container}:/tmp/
    rm error_list.txt

    python retrieve.py "Buggy API" $library_name $library_version > apis_under_test.txt
    docker cp apis_under_test.txt ${container}:/tmp/
    rm apis_under_test.txt
fi

### bug_id is mandatory only if -u is not provided
if [ -z "$bug_id" ] && [ -z "$library_version" ]; then
    echo "Please provide bug id (-i) or library version (-u)"
    usage
    exit
fi

### container is mandatory
if [ "$container" == "" ]; then 
    usage
    exit
fi

# bug_id must exit
if ! ls $home_location/$library_name | cut -d\_ -f2 | grep $bug_id > /dev/null ; then
    echo "could not find bug-id $bug_id for $library_name"
    exit
fi

(
    cd ${home_location}/${library_name}/issue_${bug_id};
    echo "Reproducing the bug";
    bash reproduce_bug.sh;
    echo "Updating environment in the container of the testing tool"
    awk '
    BEGIN { in_block = 0 } 
    /^conda activate/ { in_block = 1; next } 
    /^pytest/ { in_block = 0 } 
    in_block
    ' "reproduce_bug.sh" > "install_environment.sh";
    [ -s install_environment.sh ] || echo "pip install -r requirements.txt" > "install_environment.sh";
    chmod +x "install_environment.sh";
    cd ${home_location}/${library_name};
    docker cp issue_${bug_id}/. ${container}:/tmp/issue_${bug_id};
    docker exec -it ${container} bash -c "ls /tmp/issue_${bug_id} && cd /tmp/issue_${bug_id} && bash install_environment.sh";
    echo "Running the testing tool on the environment of the bug";
    cd ${home_location};
    bash ${run_script} ${library_name};
    cd ${home_location}/${library_name}/issue_${bug_id};
    rm install_environment.sh
)
